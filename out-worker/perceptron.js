"use strict";
class Perceptron {
    constructor(inputCount, weights = Array.from({ length: inputCount }, Perceptron.randomWeight), threshold = Perceptron.randomWeight()) {
        this.weights = weights;
        this.threshold = threshold;
        this.learningRate = 0.3;
        this.iterations = 1000;
        this.errorRange = 0;
    }
    static randomWeight() {
        return (Math.random() - 0.5) / 5;
    }
    activate(inputs) {
        return inputs.reduce((acc, x, i) => acc + x * this.weights[i], 0) > this.threshold ? 1 : 0;
    }
    learn(trainingSet) {
        for (let i = 0; i < this.iterations; i++) {
            let totalError = 0;
            for (const [inputs, target] of trainingSet) {
                const error = target - this.activate(inputs);
                totalError += Math.pow(error, 2);
                const learnWeight = (weight, input) => weight + this.learningRate * error * input;
                this.weights = this.weights.map((x, i) => learnWeight(x, inputs[i]));
                this.threshold = learnWeight(this.threshold, -1);
            }
            if (totalError <= this.errorRange) {
                break;
            }
        }
    }
    toPerceptronData() {
        return {
            weights: this.weights,
            threshold: this.threshold
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyY2VwdHJvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy13b3JrZXIvcGVyY2VwdHJvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFNSSxZQUNJLFVBQWtCLEVBQ1gsVUFBVSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFDckUsWUFBWSxVQUFVLENBQUMsWUFBWSxFQUFFO1FBRHJDLFlBQU8sR0FBUCxPQUFPLENBQThEO1FBQ3JFLGNBQVMsR0FBVCxTQUFTLENBQTRCO1FBUHZDLGlCQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ25CLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsZUFBVSxHQUFHLENBQUMsQ0FBQztJQU1yQixDQUFDO0lBRUosTUFBTSxDQUFDLFlBQVk7UUFDZixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRLENBQUMsTUFBeUI7UUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBeUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdkMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDekMsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzdDLFVBQVUsSUFBSSxTQUFBLEtBQUssRUFBSSxDQUFDLENBQUEsQ0FBQztnQkFDekIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxNQUFjLEVBQUUsS0FBYSxLQUM5QyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JFLElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxLQUFLLENBQUM7WUFDVixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixNQUFNLENBQUM7WUFDSCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQzVCLENBQUM7SUFDTixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQZXJjZXB0cm9uIHtcclxuXHJcbiAgICByZWFkb25seSBsZWFybmluZ1JhdGUgPSAwLjM7XHJcbiAgICByZWFkb25seSBpdGVyYXRpb25zID0gMTAwMDtcclxuICAgIHJlYWRvbmx5IGVycm9yUmFuZ2UgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGlucHV0Q291bnQ6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgd2VpZ2h0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGlucHV0Q291bnQgfSwgUGVyY2VwdHJvbi5yYW5kb21XZWlnaHQpLFxyXG4gICAgICAgIHB1YmxpYyB0aHJlc2hvbGQgPSBQZXJjZXB0cm9uLnJhbmRvbVdlaWdodCgpXHJcbiAgICApIHt9XHJcblxyXG4gICAgc3RhdGljIHJhbmRvbVdlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAwLjUpIC8gNTtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmF0ZShpbnB1dHM6IFVpbnQ4Q2xhbXBlZEFycmF5KSB7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0cy5yZWR1Y2UoKGFjYywgeCwgaSkgPT4gYWNjICsgeCAqIHRoaXMud2VpZ2h0c1tpXSwgMCkgPiB0aGlzLnRocmVzaG9sZCA/IDEgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGxlYXJuKHRyYWluaW5nU2V0OiBbVWludDhDbGFtcGVkQXJyYXksIDAgfCAxXVtdKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZXJhdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxFcnJvciA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2lucHV0cywgdGFyZ2V0XSBvZiB0cmFpbmluZ1NldCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0YXJnZXQgLSB0aGlzLmFjdGl2YXRlKGlucHV0cyk7XHJcbiAgICAgICAgICAgICAgICB0b3RhbEVycm9yICs9IGVycm9yICoqIDI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWFybldlaWdodCA9ICh3ZWlnaHQ6IG51bWJlciwgaW5wdXQ6IG51bWJlcikgPT5cclxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgKyB0aGlzLmxlYXJuaW5nUmF0ZSAqIGVycm9yICogaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlaWdodHMgPSB0aGlzLndlaWdodHMubWFwKCh4LCBpKSA9PiBsZWFybldlaWdodCh4LCBpbnB1dHNbaV0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhyZXNob2xkID0gbGVhcm5XZWlnaHQodGhpcy50aHJlc2hvbGQsIC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodG90YWxFcnJvciA8PSB0aGlzLmVycm9yUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRvUGVyY2VwdHJvbkRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgd2VpZ2h0czogdGhpcy53ZWlnaHRzLFxyXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHRoaXMudGhyZXNob2xkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19