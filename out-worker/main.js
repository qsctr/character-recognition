"use strict";
importScripts('perceptron.js');
importScripts('train.js');
importScripts('classify.js');
var Main;
(function (Main) {
    Main.chars = [];
    Main.perceptrons = [];
    onmessage = ({ data }) => {
        switch (data.type) {
            case 'init':
                Main.chars = data.chars;
                if (data.initData === null) {
                    Main.perceptrons = Main.chars.map(() => new Perceptron(data.inputCount));
                }
                else {
                    Main.perceptrons = data.initData.map(({ weights, threshold }) => new Perceptron(data.inputCount, weights, threshold));
                }
                break;
            case 'train':
                Main.train(data.trainingSets);
                break;
            case 'classify':
                Main.classify(data.image);
                break;
        }
    };
})(Main || (Main = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy13b3JrZXIvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQy9CLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFN0IsSUFBVSxJQUFJLENBeUJiO0FBekJELFdBQVUsSUFBSTtJQUVDLFVBQUssR0FBRyxFQUFjLENBQUM7SUFDdkIsZ0JBQVcsR0FBRyxFQUFrQixDQUFDO0lBRTVDLFNBQVMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUF5QjtRQUN4QyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQixLQUFLLE1BQU07Z0JBQ1AsS0FBQSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDbkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN6QixLQUFBLFdBQVcsR0FBRyxLQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDbkUsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixLQUFBLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUNuRCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDO2dCQUNELEtBQUssQ0FBQztZQUNWLEtBQUssT0FBTztnQkFDUixLQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3pCLEtBQUssQ0FBQztZQUNWLEtBQUssVUFBVTtnQkFDWCxLQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JCLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDLENBQUM7QUFFTixDQUFDLEVBekJTLElBQUksS0FBSixJQUFJLFFBeUJiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0U2NyaXB0cygncGVyY2VwdHJvbi5qcycpO1xyXG5pbXBvcnRTY3JpcHRzKCd0cmFpbi5qcycpO1xyXG5pbXBvcnRTY3JpcHRzKCdjbGFzc2lmeS5qcycpO1xyXG5cclxubmFtZXNwYWNlIE1haW4ge1xyXG5cclxuICAgIGV4cG9ydCBsZXQgY2hhcnMgPSBbXSBhcyBzdHJpbmdbXTtcclxuICAgIGV4cG9ydCBsZXQgcGVyY2VwdHJvbnMgPSBbXSBhcyBQZXJjZXB0cm9uW107XHJcblxyXG4gICAgb25tZXNzYWdlID0gKHsgZGF0YSB9OiB7IGRhdGE6IE1haW5NZXNzYWdlIH0pID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdpbml0JzpcclxuICAgICAgICAgICAgICAgIGNoYXJzID0gZGF0YS5jaGFycztcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmluaXREYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VwdHJvbnMgPSBjaGFycy5tYXAoKCkgPT4gbmV3IFBlcmNlcHRyb24oZGF0YS5pbnB1dENvdW50KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlcHRyb25zID0gZGF0YS5pbml0RGF0YS5tYXAoKHsgd2VpZ2h0cywgdGhyZXNob2xkIH0pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQZXJjZXB0cm9uKGRhdGEuaW5wdXRDb3VudCwgd2VpZ2h0cywgdGhyZXNob2xkKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndHJhaW4nOlxyXG4gICAgICAgICAgICAgICAgdHJhaW4oZGF0YS50cmFpbmluZ1NldHMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NsYXNzaWZ5JzpcclxuICAgICAgICAgICAgICAgIGNsYXNzaWZ5KGRhdGEuaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbn1cclxuIl19