"use strict";
class InputArea extends DisplayArea {
    constructor(canvasSelector) {
        super(canvasSelector);
        this.noiseRate = 0.2;
        this.penThickness = Math.min(this.canvas.width, this.canvas.height) / 50 * 3;
        const zoomX = parseFloat(getComputedStyle(this.canvas).width)
            / this.canvas.width;
        const zoomY = parseFloat(getComputedStyle(this.canvas).height)
            / this.canvas.height;
        this.canvas.addEventListener('mousemove', e => {
            const canvasX = (e.clientX - this.canvas.offsetLeft) / zoomX - this.penThickness / 2;
            const canvasY = (e.clientY - this.canvas.offsetTop) / zoomY - this.penThickness / 2;
            switch (e.buttons) {
                case 1:
                    this.context.fillRect(canvasX, canvasY, this.penThickness, this.penThickness);
                    break;
                case 2:
                    this.context.clearRect(canvasX, canvasY, this.penThickness, this.penThickness);
                    break;
            }
        });
        this.canvas.addEventListener('contextmenu', e => {
            e.preventDefault();
        });
    }
    addNoise() {
        this.context.putImageData(new ImageData(this.getData().map((x, i) => i % 4 === 3 && Math.random() < this.noiseRate ?
            (x === 0 ? Math.random() * 255 : x - Math.random() * x) : x), this.canvas.width, this.canvas.height), 0, 0);
    }
    getData() {
        return this.context.getImageData(0, 0, this.canvas.width, this.canvas.height).data;
    }
    getBuffer() {
        return this.getData().filter((_, i) => i % 4 === 3).buffer;
    }
    getSize() {
        return this.canvas.width * this.canvas.height;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtYXJlYS5qcyIsInNvdXJjZVJvb3QiOiJkOi9TdHVkZW50X0RhdGEvR2l0aHViL2NoYXJhY3Rlci1yZWNvZ25pdGlvbi9zcmMvIiwic291cmNlcyI6WyJpbnB1dC1hcmVhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxlQUFnQixTQUFRLFdBQVc7SUFLL0IsWUFBWSxjQUFzQjtRQUU5QixLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFKakIsY0FBUyxHQUFHLEdBQUcsQ0FBQztRQU1yQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTdFLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBZSxDQUFDO2NBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBZ0IsQ0FBQztjQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUV6QixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztZQUNyRixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7WUFDcEYsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLEtBQUssQ0FBQztvQkFDRixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUM5RSxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxDQUFDO29CQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQy9FLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDekMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQ3BCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUztZQUN6QyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDbEUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDM0MsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxTQUFTO1FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQy9ELENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xELENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElucHV0QXJlYSBleHRlbmRzIERpc3BsYXlBcmVhIHtcclxuXHJcbiAgICByZWFkb25seSBwZW5UaGlja25lc3M6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG5vaXNlUmF0ZSA9IDAuMjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXNTZWxlY3Rvcjogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGNhbnZhc1NlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgdGhpcy5wZW5UaGlja25lc3MgPSBNYXRoLm1pbih0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KSAvIDUwICogMztcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB6b29tWCA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNhbnZhcykud2lkdGggYXMgc3RyaW5nKVxyXG4gICAgICAgICAgICAvIHRoaXMuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IHpvb21ZID0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKHRoaXMuY2FudmFzKS5oZWlnaHQgYXMgc3RyaW5nKVxyXG4gICAgICAgICAgICAvIHRoaXMuY2FudmFzLmhlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhc1ggPSAoZS5jbGllbnRYIC0gdGhpcy5jYW52YXMub2Zmc2V0TGVmdCkgLyB6b29tWCAtIHRoaXMucGVuVGhpY2tuZXNzIC8gMjtcclxuICAgICAgICAgICAgY29uc3QgY2FudmFzWSA9IChlLmNsaWVudFkgLSB0aGlzLmNhbnZhcy5vZmZzZXRUb3ApIC8gem9vbVkgLSB0aGlzLnBlblRoaWNrbmVzcyAvIDI7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZS5idXR0b25zKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KGNhbnZhc1gsIGNhbnZhc1ksIHRoaXMucGVuVGhpY2tuZXNzLCB0aGlzLnBlblRoaWNrbmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdChjYW52YXNYLCBjYW52YXNZLCB0aGlzLnBlblRoaWNrbmVzcywgdGhpcy5wZW5UaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYWRkTm9pc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnB1dEltYWdlRGF0YShuZXcgSW1hZ2VEYXRhKFxyXG4gICAgICAgICAgICB0aGlzLmdldERhdGEoKS5tYXAoKHgsIGkpID0+XHJcbiAgICAgICAgICAgICAgICBpICUgNCA9PT0gMyAmJiBNYXRoLnJhbmRvbSgpIDwgdGhpcy5ub2lzZVJhdGUgP1xyXG4gICAgICAgICAgICAgICAgICAgICh4ID09PSAwID8gTWF0aC5yYW5kb20oKSAqIDI1NSA6IHggLSBNYXRoLnJhbmRvbSgpICogeCkgOiB4XHJcbiAgICAgICAgICAgICksIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHRcclxuICAgICAgICApLCAwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpLmRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QnVmZmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKS5maWx0ZXIoKF8sIGkpID0+IGkgJSA0ID09PSAzKS5idWZmZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==