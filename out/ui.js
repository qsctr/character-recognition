"use strict";
(() => {
    addEventListener('keydown', ({ key, which }) => {
        if (key.length === 1) {
            App.inputArea.renderChar(key);
        }
        else if (which === 13) {
            classify();
        }
    });
    new Toggle(document.querySelector('#help-toggle-button'), document.querySelector('#help-toggle-area'), false);
    const addNoiseButton = document.querySelector('#add-noise');
    addNoiseButton.addEventListener('click', () => {
        App.inputArea.addNoise();
    });
    const classifyButton = document.querySelector('#classify');
    const classifyMessage = document.querySelector('#classify-message');
    const classifyMessageExpandable = new Expandable(classifyMessage, false);
    function classify() {
        App.classify(output => {
            switch (output.type) {
                case 'success':
                    classifyMessage.textContent = `Classified as '${output.char}'`;
                    App.outputArea.renderChar(output.char);
                    break;
                case 'fail':
                    classifyMessage.textContent = 'Could not classify';
                    App.outputArea.fillBlack();
                    break;
                case 'blocked':
                    classifyMessage.textContent = 'Cannot classify while training';
                    App.outputArea.fillBlack();
                    break;
            }
            if (!App.trained) {
                classifyMessage.textContent += `
The perceptrons have not been trained yet, so this result is probably wrong.`;
            }
            classifyMessageExpandable.expandTemporary();
        });
    }
    classifyButton.addEventListener('click', classify);
    const trainButton = document.querySelector('#train');
    const trainMessage = document.querySelector('#train-message');
    const trainMessageExpandable = new Expandable(trainMessage, false);
    trainButton.addEventListener('click', () => {
        trainMessage.textContent = 'Generating training sets';
        trainMessageExpandable.expand();
        App.train((char, current, total) => {
            trainMessage.textContent =
                `Generating training sets for '${char}' (${current} of ${total})`;
        }, (char, current, total) => {
            trainMessage.textContent =
                `Training perceptron for '${char}' (${current} of ${total})`;
        }, () => {
            trainMessage.textContent = 'Finished training';
            trainMessageExpandable.expandTemporary();
        });
    });
    if (App.initData === null) {
        trainMessage.textContent = 'Failed to load previous perceptron data from local storage';
    }
    else {
        trainMessage.textContent =
            'Successfully loaded previous perceptron data from local storage';
    }
    trainMessageExpandable.expandTemporary();
    addEventListener('load', () => {
        document.body.style.opacity = '1';
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWkuanMiLCJzb3VyY2VSb290IjoiZDovU3R1ZGVudF9EYXRhL0dpdGh1Yi9jaGFyYWN0ZXItcmVjb2duaXRpb24vc3JjLyIsInNvdXJjZXMiOlsidWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLENBQUM7SUFFRyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7UUFDdkMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxFQUFFLENBQUM7UUFDZixDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFZLEVBQy9ELFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdkUsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQVksQ0FBQztJQUV2RSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBWSxDQUFDO0lBQ3RFLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQWdCLENBQUM7SUFDbkYsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekU7UUFDSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU07WUFDZixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsS0FBSyxTQUFTO29CQUNWLGVBQWUsQ0FBQyxXQUFXLEdBQUcsa0JBQWtCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQztvQkFDL0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN2QyxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxNQUFNO29CQUNQLGVBQWUsQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUM7b0JBQ25ELEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzNCLEtBQUssQ0FBQztnQkFDVixLQUFLLFNBQVM7b0JBQ1YsZUFBZSxDQUFDLFdBQVcsR0FBRyxnQ0FBZ0MsQ0FBQztvQkFDL0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDM0IsS0FBSyxDQUFDO1lBQ2QsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsZUFBZSxDQUFDLFdBQVcsSUFBSTs2RUFDOEIsQ0FBQztZQUNsRSxDQUFDO1lBQ0QseUJBQXlCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVuRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBWSxDQUFDO0lBQ2hFLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQWdCLENBQUM7SUFDN0UsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLFVBQVUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbkUsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtRQUNsQyxZQUFZLENBQUMsV0FBVyxHQUFHLDBCQUEwQixDQUFDO1FBQ3RELHNCQUFzQixDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUs7WUFDM0IsWUFBWSxDQUFDLFdBQVc7Z0JBQ3BCLGlDQUFpQyxJQUFJLE1BQU0sT0FBTyxPQUFPLEtBQUssR0FBRyxDQUFDO1FBQzFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSztZQUNwQixZQUFZLENBQUMsV0FBVztnQkFDcEIsNEJBQTRCLElBQUksTUFBTSxPQUFPLE9BQU8sS0FBSyxHQUFHLENBQUM7UUFDckUsQ0FBQyxFQUFFO1lBQ0MsWUFBWSxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQztZQUMvQyxzQkFBc0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLFlBQVksQ0FBQyxXQUFXLEdBQUcsNERBQTRELENBQUM7SUFDNUYsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osWUFBWSxDQUFDLFdBQVc7WUFDcEIsaUVBQWlFLENBQUM7SUFDMUUsQ0FBQztJQUNELHNCQUFzQixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBRXpDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtRQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIigoKSA9PiB7XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICh7IGtleSwgd2hpY2ggfSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIEFwcC5pbnB1dEFyZWEucmVuZGVyQ2hhcihrZXkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAod2hpY2ggPT09IDEzKSB7XHJcbiAgICAgICAgICAgIGNsYXNzaWZ5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3IFRvZ2dsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVscC10b2dnbGUtYnV0dG9uJykgYXMgRWxlbWVudCxcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVscC10b2dnbGUtYXJlYScpIGFzIEhUTUxFbGVtZW50LCBmYWxzZSk7XHJcblxyXG4gICAgY29uc3QgYWRkTm9pc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLW5vaXNlJykgYXMgRWxlbWVudDtcclxuXHJcbiAgICBhZGROb2lzZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBBcHAuaW5wdXRBcmVhLmFkZE5vaXNlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBjbGFzc2lmeUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGFzc2lmeScpIGFzIEVsZW1lbnQ7XHJcbiAgICBjb25zdCBjbGFzc2lmeU1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xhc3NpZnktbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29uc3QgY2xhc3NpZnlNZXNzYWdlRXhwYW5kYWJsZSA9IG5ldyBFeHBhbmRhYmxlKGNsYXNzaWZ5TWVzc2FnZSwgZmFsc2UpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsYXNzaWZ5KCkge1xyXG4gICAgICAgIEFwcC5jbGFzc2lmeShvdXRwdXQgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG91dHB1dC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzdWNjZXNzJzpcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2lmeU1lc3NhZ2UudGV4dENvbnRlbnQgPSBgQ2xhc3NpZmllZCBhcyAnJHtvdXRwdXQuY2hhcn0nYDtcclxuICAgICAgICAgICAgICAgICAgICBBcHAub3V0cHV0QXJlYS5yZW5kZXJDaGFyKG91dHB1dC5jaGFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWwnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZS50ZXh0Q29udGVudCA9ICdDb3VsZCBub3QgY2xhc3NpZnknO1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcC5vdXRwdXRBcmVhLmZpbGxCbGFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2tlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlLnRleHRDb250ZW50ID0gJ0Nhbm5vdCBjbGFzc2lmeSB3aGlsZSB0cmFpbmluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgQXBwLm91dHB1dEFyZWEuZmlsbEJsYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFBcHAudHJhaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlLnRleHRDb250ZW50ICs9IGBcclxuVGhlIHBlcmNlcHRyb25zIGhhdmUgbm90IGJlZW4gdHJhaW5lZCB5ZXQsIHNvIHRoaXMgcmVzdWx0IGlzIHByb2JhYmx5IHdyb25nLmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlRXhwYW5kYWJsZS5leHBhbmRUZW1wb3JhcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGFzc2lmeUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsYXNzaWZ5KTtcclxuXHJcbiAgICBjb25zdCB0cmFpbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFpbicpIGFzIEVsZW1lbnQ7XHJcbiAgICBjb25zdCB0cmFpbk1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhaW4tbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29uc3QgdHJhaW5NZXNzYWdlRXhwYW5kYWJsZSA9IG5ldyBFeHBhbmRhYmxlKHRyYWluTWVzc2FnZSwgZmFsc2UpO1xyXG5cclxuICAgIHRyYWluQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9ICdHZW5lcmF0aW5nIHRyYWluaW5nIHNldHMnO1xyXG4gICAgICAgIHRyYWluTWVzc2FnZUV4cGFuZGFibGUuZXhwYW5kKCk7XHJcbiAgICAgICAgQXBwLnRyYWluKChjaGFyLCBjdXJyZW50LCB0b3RhbCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPVxyXG4gICAgICAgICAgICAgICAgYEdlbmVyYXRpbmcgdHJhaW5pbmcgc2V0cyBmb3IgJyR7Y2hhcn0nICgke2N1cnJlbnR9IG9mICR7dG90YWx9KWA7XHJcbiAgICAgICAgfSwgKGNoYXIsIGN1cnJlbnQsIHRvdGFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9XHJcbiAgICAgICAgICAgICAgICBgVHJhaW5pbmcgcGVyY2VwdHJvbiBmb3IgJyR7Y2hhcn0nICgke2N1cnJlbnR9IG9mICR7dG90YWx9KWA7XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPSAnRmluaXNoZWQgdHJhaW5pbmcnO1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2VFeHBhbmRhYmxlLmV4cGFuZFRlbXBvcmFyeSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKEFwcC5pbml0RGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9ICdGYWlsZWQgdG8gbG9hZCBwcmV2aW91cyBwZXJjZXB0cm9uIGRhdGEgZnJvbSBsb2NhbCBzdG9yYWdlJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJhaW5NZXNzYWdlLnRleHRDb250ZW50ID1cclxuICAgICAgICAgICAgJ1N1Y2Nlc3NmdWxseSBsb2FkZWQgcHJldmlvdXMgcGVyY2VwdHJvbiBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZSc7XHJcbiAgICB9XHJcbiAgICB0cmFpbk1lc3NhZ2VFeHBhbmRhYmxlLmV4cGFuZFRlbXBvcmFyeSgpO1xyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSk7XHJcblxyXG59KSgpO1xyXG4iXX0=