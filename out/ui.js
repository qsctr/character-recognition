"use strict";
(() => {
    addEventListener('keydown', ({ key }) => {
        if (key.length === 1) {
            App.inputArea.renderChar(key);
        }
    });
    new Toggle(document.querySelector('#help-toggle-button'), document.querySelector('#help-toggle-area'), false);
    const addNoiseButton = document.querySelector('#add-noise');
    addNoiseButton.addEventListener('click', () => {
        App.inputArea.addNoise();
    });
    const classifyButton = document.querySelector('#classify');
    const classifyMessage = document.querySelector('#classify-message');
    const classifyMessageExpandable = new Expandable(classifyMessage, false);
    classifyButton.addEventListener('click', () => {
        App.classify(output => {
            switch (output.type) {
                case 'success':
                    classifyMessage.textContent = `Classified as '${output.char}'`;
                    App.outputArea.renderChar(output.char);
                    break;
                case 'fail':
                    classifyMessage.textContent = 'Could not classify';
                    App.outputArea.fillBlack();
                    break;
                case 'blocked':
                    classifyMessage.textContent = 'Cannot classify while training';
                    App.outputArea.fillBlack();
                    break;
            }
            classifyMessageExpandable.expandTemporary();
        });
    });
    const trainButton = document.querySelector('#train');
    const trainMessage = document.querySelector('#train-message');
    const trainMessageExpandable = new Expandable(trainMessage, false);
    trainButton.addEventListener('click', () => {
        trainMessage.textContent = 'Generating training sets';
        trainMessageExpandable.expand();
        App.train((char, current, total) => {
            trainMessage.textContent =
                `Generating training sets for '${char}' (${current} of ${total})`;
        }, (char, current, total) => {
            trainMessage.textContent =
                `Training perceptron for '${char}' (${current} of ${total})`;
        }, () => {
            trainMessage.textContent = 'Finished training';
            trainMessageExpandable.expandTemporary();
        });
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWkuanMiLCJzb3VyY2VSb290IjoiZDovU3R1ZGVudF9EYXRhL0dpdGh1Yi9jaGFyYWN0ZXItcmVjb2duaXRpb24vc3JjLyIsInNvdXJjZXMiOlsidWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLENBQUM7SUFFRyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBWSxFQUMvRCxRQUFRLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXZFLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFZLENBQUM7SUFFdkUsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtRQUNyQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQVksQ0FBQztJQUN0RSxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFnQixDQUFDO0lBQ25GLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpFLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7UUFDckMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ2YsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUssU0FBUztvQkFDVixlQUFlLENBQUMsV0FBVyxHQUFHLGtCQUFrQixNQUFNLENBQUMsSUFBSSxHQUFHLENBQUM7b0JBQy9ELEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdkMsS0FBSyxDQUFDO2dCQUNWLEtBQUssTUFBTTtvQkFDUCxlQUFlLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO29CQUNuRCxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUMzQixLQUFLLENBQUM7Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLGVBQWUsQ0FBQyxXQUFXLEdBQUcsZ0NBQWdDLENBQUM7b0JBQy9ELEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzNCLEtBQUssQ0FBQztZQUNkLENBQUM7WUFDRCx5QkFBeUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQVksQ0FBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFnQixDQUFDO0lBQzdFLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRW5FLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7UUFDbEMsWUFBWSxDQUFDLFdBQVcsR0FBRywwQkFBMEIsQ0FBQztRQUN0RCxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLO1lBQzNCLFlBQVksQ0FBQyxXQUFXO2dCQUNwQixpQ0FBaUMsSUFBSSxNQUFNLE9BQU8sT0FBTyxLQUFLLEdBQUcsQ0FBQztRQUMxRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUs7WUFDcEIsWUFBWSxDQUFDLFdBQVc7Z0JBQ3BCLDRCQUE0QixJQUFJLE1BQU0sT0FBTyxPQUFPLEtBQUssR0FBRyxDQUFDO1FBQ3JFLENBQUMsRUFBRTtZQUNDLFlBQVksQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUM7WUFDL0Msc0JBQXNCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIoKCkgPT4ge1xyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoeyBrZXkgfSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIEFwcC5pbnB1dEFyZWEucmVuZGVyQ2hhcihrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIG5ldyBUb2dnbGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlbHAtdG9nZ2xlLWJ1dHRvbicpIGFzIEVsZW1lbnQsXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlbHAtdG9nZ2xlLWFyZWEnKSBhcyBIVE1MRWxlbWVudCwgZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IGFkZE5vaXNlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FkZC1ub2lzZScpIGFzIEVsZW1lbnQ7XHJcblxyXG4gICAgYWRkTm9pc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgQXBwLmlucHV0QXJlYS5hZGROb2lzZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2xhc3NpZnlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xhc3NpZnknKSBhcyBFbGVtZW50O1xyXG4gICAgY29uc3QgY2xhc3NpZnlNZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NsYXNzaWZ5LW1lc3NhZ2UnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGNvbnN0IGNsYXNzaWZ5TWVzc2FnZUV4cGFuZGFibGUgPSBuZXcgRXhwYW5kYWJsZShjbGFzc2lmeU1lc3NhZ2UsIGZhbHNlKTtcclxuXHJcbiAgICBjbGFzc2lmeUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBBcHAuY2xhc3NpZnkob3V0cHV0ID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChvdXRwdXQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlLnRleHRDb250ZW50ID0gYENsYXNzaWZpZWQgYXMgJyR7b3V0cHV0LmNoYXJ9J2A7XHJcbiAgICAgICAgICAgICAgICAgICAgQXBwLm91dHB1dEFyZWEucmVuZGVyQ2hhcihvdXRwdXQuY2hhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmYWlsJzpcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2lmeU1lc3NhZ2UudGV4dENvbnRlbnQgPSAnQ291bGQgbm90IGNsYXNzaWZ5JztcclxuICAgICAgICAgICAgICAgICAgICBBcHAub3V0cHV0QXJlYS5maWxsQmxhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZS50ZXh0Q29udGVudCA9ICdDYW5ub3QgY2xhc3NpZnkgd2hpbGUgdHJhaW5pbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcC5vdXRwdXRBcmVhLmZpbGxCbGFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZUV4cGFuZGFibGUuZXhwYW5kVGVtcG9yYXJ5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB0cmFpbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFpbicpIGFzIEVsZW1lbnQ7XHJcbiAgICBjb25zdCB0cmFpbk1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhaW4tbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29uc3QgdHJhaW5NZXNzYWdlRXhwYW5kYWJsZSA9IG5ldyBFeHBhbmRhYmxlKHRyYWluTWVzc2FnZSwgZmFsc2UpO1xyXG5cclxuICAgIHRyYWluQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9ICdHZW5lcmF0aW5nIHRyYWluaW5nIHNldHMnO1xyXG4gICAgICAgIHRyYWluTWVzc2FnZUV4cGFuZGFibGUuZXhwYW5kKCk7XHJcbiAgICAgICAgQXBwLnRyYWluKChjaGFyLCBjdXJyZW50LCB0b3RhbCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPVxyXG4gICAgICAgICAgICAgICAgYEdlbmVyYXRpbmcgdHJhaW5pbmcgc2V0cyBmb3IgJyR7Y2hhcn0nICgke2N1cnJlbnR9IG9mICR7dG90YWx9KWA7XHJcbiAgICAgICAgfSwgKGNoYXIsIGN1cnJlbnQsIHRvdGFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9XHJcbiAgICAgICAgICAgICAgICBgVHJhaW5pbmcgcGVyY2VwdHJvbiBmb3IgJyR7Y2hhcn0nICgke2N1cnJlbnR9IG9mICR7dG90YWx9KWA7XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPSAnRmluaXNoZWQgdHJhaW5pbmcnO1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2VFeHBhbmRhYmxlLmV4cGFuZFRlbXBvcmFyeSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG59KSgpO1xyXG4iXX0=