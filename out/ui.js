"use strict";
(() => {
    addEventListener('keydown', ({ key }) => {
        if (key.length === 1) {
            App.inputArea.renderChar(key);
        }
    });
    new Toggle(document.querySelector('#help-toggle-button'), document.querySelector('#help-toggle-area'), false);
    const addNoiseButton = document.querySelector('#add-noise');
    addNoiseButton.addEventListener('click', () => {
        App.inputArea.addNoise();
    });
    const classifyButton = document.querySelector('#classify');
    const classifyMessage = document.querySelector('#classify-message');
    const classifyMessageExpandable = new Expandable(classifyMessage, false);
    classifyButton.addEventListener('click', () => {
        App.classify(output => {
            switch (output.type) {
                case 'success':
                    classifyMessage.textContent = `Classified as '${output.char}'`;
                    App.outputArea.renderChar(output.char);
                    break;
                case 'fail':
                    classifyMessage.textContent = 'Could not classify';
                    App.outputArea.fillBlack();
                    break;
                case 'blocked':
                    classifyMessage.textContent = 'Cannot classify while training';
                    App.outputArea.fillBlack();
                    break;
            }
            classifyMessageExpandable.expandTemporary();
        });
    });
    const trainButton = document.querySelector('#train');
    const trainMessage = document.querySelector('#train-message');
    const trainMessageExpandable = new Expandable(trainMessage, false);
    trainButton.addEventListener('click', () => {
        trainMessage.textContent = 'Generating training sets';
        trainMessageExpandable.expand();
        App.train((char, current, total) => {
            trainMessage.textContent =
                `Generating training sets for '${char}' (${current} of ${total})`;
        }, (char, current, total) => {
            trainMessage.textContent =
                `Training perceptron for '${char}' (${current} of ${total})`;
        }, () => {
            trainMessage.textContent = 'Finished training';
            trainMessageExpandable.expandTemporary();
        });
    });
    addEventListener('load', () => {
        document.body.style.opacity = '1';
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWkuanMiLCJzb3VyY2VSb290IjoiZDovU3R1ZGVudF9EYXRhL0dpdGh1Yi9jaGFyYWN0ZXItcmVjb2duaXRpb24vc3JjLyIsInNvdXJjZXMiOlsidWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLENBQUM7SUFFRyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBWSxFQUMvRCxRQUFRLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXZFLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFZLENBQUM7SUFFdkUsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtRQUNyQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQVksQ0FBQztJQUN0RSxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFnQixDQUFDO0lBQ25GLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpFLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7UUFDckMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ2YsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUssU0FBUztvQkFDVixlQUFlLENBQUMsV0FBVyxHQUFHLGtCQUFrQixNQUFNLENBQUMsSUFBSSxHQUFHLENBQUM7b0JBQy9ELEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdkMsS0FBSyxDQUFDO2dCQUNWLEtBQUssTUFBTTtvQkFDUCxlQUFlLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO29CQUNuRCxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUMzQixLQUFLLENBQUM7Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLGVBQWUsQ0FBQyxXQUFXLEdBQUcsZ0NBQWdDLENBQUM7b0JBQy9ELEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzNCLEtBQUssQ0FBQztZQUNkLENBQUM7WUFDRCx5QkFBeUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQVksQ0FBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFnQixDQUFDO0lBQzdFLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRW5FLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7UUFDbEMsWUFBWSxDQUFDLFdBQVcsR0FBRywwQkFBMEIsQ0FBQztRQUN0RCxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLO1lBQzNCLFlBQVksQ0FBQyxXQUFXO2dCQUNwQixpQ0FBaUMsSUFBSSxNQUFNLE9BQU8sT0FBTyxLQUFLLEdBQUcsQ0FBQztRQUMxRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUs7WUFDcEIsWUFBWSxDQUFDLFdBQVc7Z0JBQ3BCLDRCQUE0QixJQUFJLE1BQU0sT0FBTyxPQUFPLEtBQUssR0FBRyxDQUFDO1FBQ3JFLENBQUMsRUFBRTtZQUNDLFlBQVksQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUM7WUFDL0Msc0JBQXNCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILGdCQUFnQixDQUFDLE1BQU0sRUFBRTtRQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIigoKSA9PiB7XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICh7IGtleSB9KSA9PiB7XHJcbiAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgQXBwLmlucHV0QXJlYS5yZW5kZXJDaGFyKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3IFRvZ2dsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVscC10b2dnbGUtYnV0dG9uJykgYXMgRWxlbWVudCxcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVscC10b2dnbGUtYXJlYScpIGFzIEhUTUxFbGVtZW50LCBmYWxzZSk7XHJcblxyXG4gICAgY29uc3QgYWRkTm9pc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLW5vaXNlJykgYXMgRWxlbWVudDtcclxuXHJcbiAgICBhZGROb2lzZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBBcHAuaW5wdXRBcmVhLmFkZE5vaXNlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBjbGFzc2lmeUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGFzc2lmeScpIGFzIEVsZW1lbnQ7XHJcbiAgICBjb25zdCBjbGFzc2lmeU1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xhc3NpZnktbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29uc3QgY2xhc3NpZnlNZXNzYWdlRXhwYW5kYWJsZSA9IG5ldyBFeHBhbmRhYmxlKGNsYXNzaWZ5TWVzc2FnZSwgZmFsc2UpO1xyXG5cclxuICAgIGNsYXNzaWZ5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIEFwcC5jbGFzc2lmeShvdXRwdXQgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG91dHB1dC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzdWNjZXNzJzpcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2lmeU1lc3NhZ2UudGV4dENvbnRlbnQgPSBgQ2xhc3NpZmllZCBhcyAnJHtvdXRwdXQuY2hhcn0nYDtcclxuICAgICAgICAgICAgICAgICAgICBBcHAub3V0cHV0QXJlYS5yZW5kZXJDaGFyKG91dHB1dC5jaGFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWwnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZS50ZXh0Q29udGVudCA9ICdDb3VsZCBub3QgY2xhc3NpZnknO1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcC5vdXRwdXRBcmVhLmZpbGxCbGFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2tlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlLnRleHRDb250ZW50ID0gJ0Nhbm5vdCBjbGFzc2lmeSB3aGlsZSB0cmFpbmluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgQXBwLm91dHB1dEFyZWEuZmlsbEJsYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlRXhwYW5kYWJsZS5leHBhbmRUZW1wb3JhcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRyYWluQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RyYWluJykgYXMgRWxlbWVudDtcclxuICAgIGNvbnN0IHRyYWluTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFpbi1tZXNzYWdlJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCB0cmFpbk1lc3NhZ2VFeHBhbmRhYmxlID0gbmV3IEV4cGFuZGFibGUodHJhaW5NZXNzYWdlLCBmYWxzZSk7XHJcblxyXG4gICAgdHJhaW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdHJhaW5NZXNzYWdlLnRleHRDb250ZW50ID0gJ0dlbmVyYXRpbmcgdHJhaW5pbmcgc2V0cyc7XHJcbiAgICAgICAgdHJhaW5NZXNzYWdlRXhwYW5kYWJsZS5leHBhbmQoKTtcclxuICAgICAgICBBcHAudHJhaW4oKGNoYXIsIGN1cnJlbnQsIHRvdGFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9XHJcbiAgICAgICAgICAgICAgICBgR2VuZXJhdGluZyB0cmFpbmluZyBzZXRzIGZvciAnJHtjaGFyfScgKCR7Y3VycmVudH0gb2YgJHt0b3RhbH0pYDtcclxuICAgICAgICB9LCAoY2hhciwgY3VycmVudCwgdG90YWwpID0+IHtcclxuICAgICAgICAgICAgdHJhaW5NZXNzYWdlLnRleHRDb250ZW50ID1cclxuICAgICAgICAgICAgICAgIGBUcmFpbmluZyBwZXJjZXB0cm9uIGZvciAnJHtjaGFyfScgKCR7Y3VycmVudH0gb2YgJHt0b3RhbH0pYDtcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9ICdGaW5pc2hlZCB0cmFpbmluZyc7XHJcbiAgICAgICAgICAgIHRyYWluTWVzc2FnZUV4cGFuZGFibGUuZXhwYW5kVGVtcG9yYXJ5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0pO1xyXG5cclxufSkoKTtcclxuIl19