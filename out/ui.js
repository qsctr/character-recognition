"use strict";
(() => {
    addEventListener('keydown', ({ key, which }) => {
        if (key.length === 1) {
            App.inputArea.renderChar(key);
        }
        else if (which === 13) {
            classify();
        }
    });
    new Toggle(document.querySelector('#help-toggle-button'), document.querySelector('#help-toggle-area'), false);
    const addNoiseButton = document.querySelector('#add-noise');
    addNoiseButton.addEventListener('click', () => {
        App.inputArea.addNoise();
    });
    const classifyButton = document.querySelector('#classify');
    const classifyMessage = document.querySelector('#classify-message');
    const classifyMessageExpandable = new Expandable(classifyMessage, false);
    function classify() {
        App.classify(output => {
            switch (output.type) {
                case 'success':
                    classifyMessage.textContent = `Classified as '${output.char}'`;
                    App.outputArea.renderChar(output.char);
                    break;
                case 'fail':
                    classifyMessage.textContent = 'Could not classify';
                    App.outputArea.fillBlack();
                    break;
                case 'blocked':
                    classifyMessage.textContent = 'Cannot classify while training';
                    App.outputArea.fillBlack();
                    break;
            }
            if (!App.trained && !App.training) {
                classifyMessage.textContent += `
The perceptrons have not been trained yet, so this result is probably wrong.`;
            }
            classifyMessageExpandable.expandTemporary();
        });
    }
    classifyButton.addEventListener('click', classify);
    const trainButton = document.querySelector('#train');
    const trainMessage = document.querySelector('#train-message');
    const trainMessageExpandable = new Expandable(trainMessage, false);
    trainButton.addEventListener('click', () => {
        trainMessage.textContent = 'Generating training sets';
        trainMessageExpandable.expand();
        App.train((char, current, total) => {
            trainMessage.textContent =
                `Generating training sets for '${char}' (${current} of ${total})`;
        }, (char, current, total) => {
            trainMessage.textContent =
                `Training perceptron for '${char}' (${current} of ${total})`;
        }, () => {
            trainMessage.textContent = 'Finished training';
            trainMessageExpandable.expandTemporary();
        });
    });
    if (App.initData === null) {
        trainMessage.textContent = 'Failed to load previous perceptron data from local storage';
    }
    else {
        trainMessage.textContent =
            'Successfully loaded previous perceptron data from local storage';
    }
    trainMessageExpandable.expandTemporary();
    addEventListener('load', () => {
        document.body.style.opacity = '1';
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWkuanMiLCJzb3VyY2VSb290IjoiZDovU3R1ZGVudF9EYXRhL0dpdGh1Yi9jaGFyYWN0ZXItcmVjb2duaXRpb24vc3JjLyIsInNvdXJjZXMiOlsidWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLENBQUM7SUFFRyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7UUFDdkMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxFQUFFLENBQUM7UUFDZixDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFZLEVBQy9ELFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdkUsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQVksQ0FBQztJQUV2RSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBWSxDQUFDO0lBQ3RFLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQWdCLENBQUM7SUFDbkYsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekU7UUFDSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU07WUFDZixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsS0FBSyxTQUFTO29CQUNWLGVBQWUsQ0FBQyxXQUFXLEdBQUcsa0JBQWtCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQztvQkFDL0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN2QyxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxNQUFNO29CQUNQLGVBQWUsQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUM7b0JBQ25ELEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzNCLEtBQUssQ0FBQztnQkFDVixLQUFLLFNBQVM7b0JBQ1YsZUFBZSxDQUFDLFdBQVcsR0FBRyxnQ0FBZ0MsQ0FBQztvQkFDL0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDM0IsS0FBSyxDQUFDO1lBQ2QsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxlQUFlLENBQUMsV0FBVyxJQUFJOzZFQUM4QixDQUFDO1lBQ2xFLENBQUM7WUFDRCx5QkFBeUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxjQUFjLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRW5ELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFZLENBQUM7SUFDaEUsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBZ0IsQ0FBQztJQUM3RSxNQUFNLHNCQUFzQixHQUFHLElBQUksVUFBVSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVuRSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1FBQ2xDLFlBQVksQ0FBQyxXQUFXLEdBQUcsMEJBQTBCLENBQUM7UUFDdEQsc0JBQXNCLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSztZQUMzQixZQUFZLENBQUMsV0FBVztnQkFDcEIsaUNBQWlDLElBQUksTUFBTSxPQUFPLE9BQU8sS0FBSyxHQUFHLENBQUM7UUFDMUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLO1lBQ3BCLFlBQVksQ0FBQyxXQUFXO2dCQUNwQiw0QkFBNEIsSUFBSSxNQUFNLE9BQU8sT0FBTyxLQUFLLEdBQUcsQ0FBQztRQUNyRSxDQUFDLEVBQUU7WUFDQyxZQUFZLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDO1lBQy9DLHNCQUFzQixDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEIsWUFBWSxDQUFDLFdBQVcsR0FBRyw0REFBNEQsQ0FBQztJQUM1RixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixZQUFZLENBQUMsV0FBVztZQUNwQixpRUFBaUUsQ0FBQztJQUMxRSxDQUFDO0lBQ0Qsc0JBQXNCLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFekMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1FBQ3JCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiKCgpID0+IHtcclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKHsga2V5LCB3aGljaCB9KSA9PiB7XHJcbiAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgQXBwLmlucHV0QXJlYS5yZW5kZXJDaGFyKGtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh3aGljaCA9PT0gMTMpIHtcclxuICAgICAgICAgICAgY2xhc3NpZnkoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBuZXcgVG9nZ2xlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoZWxwLXRvZ2dsZS1idXR0b24nKSBhcyBFbGVtZW50LFxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoZWxwLXRvZ2dsZS1hcmVhJykgYXMgSFRNTEVsZW1lbnQsIGZhbHNlKTtcclxuXHJcbiAgICBjb25zdCBhZGROb2lzZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtbm9pc2UnKSBhcyBFbGVtZW50O1xyXG5cclxuICAgIGFkZE5vaXNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIEFwcC5pbnB1dEFyZWEuYWRkTm9pc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzaWZ5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NsYXNzaWZ5JykgYXMgRWxlbWVudDtcclxuICAgIGNvbnN0IGNsYXNzaWZ5TWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGFzc2lmeS1tZXNzYWdlJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCBjbGFzc2lmeU1lc3NhZ2VFeHBhbmRhYmxlID0gbmV3IEV4cGFuZGFibGUoY2xhc3NpZnlNZXNzYWdlLCBmYWxzZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gY2xhc3NpZnkoKSB7XHJcbiAgICAgICAgQXBwLmNsYXNzaWZ5KG91dHB1dCA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3V0cHV0LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZS50ZXh0Q29udGVudCA9IGBDbGFzc2lmaWVkIGFzICcke291dHB1dC5jaGFyfSdgO1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcC5vdXRwdXRBcmVhLnJlbmRlckNoYXIob3V0cHV0LmNoYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NpZnlNZXNzYWdlLnRleHRDb250ZW50ID0gJ0NvdWxkIG5vdCBjbGFzc2lmeSc7XHJcbiAgICAgICAgICAgICAgICAgICAgQXBwLm91dHB1dEFyZWEuZmlsbEJsYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdibG9ja2VkJzpcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2lmeU1lc3NhZ2UudGV4dENvbnRlbnQgPSAnQ2Fubm90IGNsYXNzaWZ5IHdoaWxlIHRyYWluaW5nJztcclxuICAgICAgICAgICAgICAgICAgICBBcHAub3V0cHV0QXJlYS5maWxsQmxhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIUFwcC50cmFpbmVkICYmICFBcHAudHJhaW5pbmcpIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZS50ZXh0Q29udGVudCArPSBgXHJcblRoZSBwZXJjZXB0cm9ucyBoYXZlIG5vdCBiZWVuIHRyYWluZWQgeWV0LCBzbyB0aGlzIHJlc3VsdCBpcyBwcm9iYWJseSB3cm9uZy5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsYXNzaWZ5TWVzc2FnZUV4cGFuZGFibGUuZXhwYW5kVGVtcG9yYXJ5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3NpZnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGFzc2lmeSk7XHJcblxyXG4gICAgY29uc3QgdHJhaW5CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhaW4nKSBhcyBFbGVtZW50O1xyXG4gICAgY29uc3QgdHJhaW5NZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RyYWluLW1lc3NhZ2UnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGNvbnN0IHRyYWluTWVzc2FnZUV4cGFuZGFibGUgPSBuZXcgRXhwYW5kYWJsZSh0cmFpbk1lc3NhZ2UsIGZhbHNlKTtcclxuXHJcbiAgICB0cmFpbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPSAnR2VuZXJhdGluZyB0cmFpbmluZyBzZXRzJztcclxuICAgICAgICB0cmFpbk1lc3NhZ2VFeHBhbmRhYmxlLmV4cGFuZCgpO1xyXG4gICAgICAgIEFwcC50cmFpbigoY2hhciwgY3VycmVudCwgdG90YWwpID0+IHtcclxuICAgICAgICAgICAgdHJhaW5NZXNzYWdlLnRleHRDb250ZW50ID1cclxuICAgICAgICAgICAgICAgIGBHZW5lcmF0aW5nIHRyYWluaW5nIHNldHMgZm9yICcke2NoYXJ9JyAoJHtjdXJyZW50fSBvZiAke3RvdGFsfSlgO1xyXG4gICAgICAgIH0sIChjaGFyLCBjdXJyZW50LCB0b3RhbCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPVxyXG4gICAgICAgICAgICAgICAgYFRyYWluaW5nIHBlcmNlcHRyb24gZm9yICcke2NoYXJ9JyAoJHtjdXJyZW50fSBvZiAke3RvdGFsfSlgO1xyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdHJhaW5NZXNzYWdlLnRleHRDb250ZW50ID0gJ0ZpbmlzaGVkIHRyYWluaW5nJztcclxuICAgICAgICAgICAgdHJhaW5NZXNzYWdlRXhwYW5kYWJsZS5leHBhbmRUZW1wb3JhcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChBcHAuaW5pdERhdGEgPT09IG51bGwpIHtcclxuICAgICAgICB0cmFpbk1lc3NhZ2UudGV4dENvbnRlbnQgPSAnRmFpbGVkIHRvIGxvYWQgcHJldmlvdXMgcGVyY2VwdHJvbiBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyYWluTWVzc2FnZS50ZXh0Q29udGVudCA9XHJcbiAgICAgICAgICAgICdTdWNjZXNzZnVsbHkgbG9hZGVkIHByZXZpb3VzIHBlcmNlcHRyb24gZGF0YSBmcm9tIGxvY2FsIHN0b3JhZ2UnO1xyXG4gICAgfVxyXG4gICAgdHJhaW5NZXNzYWdlRXhwYW5kYWJsZS5leHBhbmRUZW1wb3JhcnkoKTtcclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0pO1xyXG5cclxufSkoKTtcclxuIl19